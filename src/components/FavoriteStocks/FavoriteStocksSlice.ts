import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { ICompany, IFavoriteStocks, IQuote } from '../../core/types';
import { fetchStockCompany, fetchStockQuote } from './FavoriteStocksAPI';

const initialState: IFavoriteStocks = {
    search: {
        company: null,
        isLoading: false,
        error: null,
    },
    list: {
        quotes: [],
        isLoading: false,
        error: null,
    },
};

export const favoriteStocksSlice = createSlice({
    name: 'counter',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        removeItemFromQuotes: (state, action: PayloadAction<string>) => {
            state.list.quotes = state.list.quotes.filter(x => x.symbol !== action.payload);
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: builder => {
        builder
            .addCase(fetchStockCompany.pending, state => {
                state.search.company = null;
                state.search.isLoading = true;
                state.search.error = null;
            })
            .addCase(fetchStockCompany.fulfilled, (state, action: PayloadAction<ICompany>) => {
                state.search.company = action.payload;
                state.search.isLoading = false;
            })
            .addCase(fetchStockCompany.rejected, (state, action) => {
                state.search.isLoading = false;
                state.search.error = action.payload as string;
            })
            .addCase(fetchStockQuote.pending, state => {
                state.list.isLoading = true;
                state.list.error = null;
            })
            .addCase(fetchStockQuote.fulfilled, (state, action: PayloadAction<IQuote>) => {
                state.list.quotes.push(action.payload);
                state.list.isLoading = false;
            })
            .addCase(fetchStockQuote.rejected, (state, action) => {
                state.list.isLoading = false;
                state.list.error = action.payload as string;
            });
    },
});

const { reducer: favoriteStocksReducer, actions } = favoriteStocksSlice;

export const { removeItemFromQuotes } = actions || {};

export default favoriteStocksReducer;
